---


###########################################################
#   1- OS dependencies (debian packages)
###########################################################

- name: "Add multiverse repositories"
  sudo: "yes"
  apt_repository:
    repo: "{{ item }}"
    state: "present"
  with_items:
    - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }} multiverse"
    - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }}-security universe"
    - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }}-updates multiverse"



- name: "Install archivematica-common package dependencies"
  apt:
    pkg: "{{ item }}"
    state: "latest"
  with_items:
    - "python"
    - "python-pip"
    - "python2.7-elementtree"
    - "python-mimeparse"
    - "python-dateutil"


- name: "Install archivematica-dashboard package dependencies"
  apt:
    pkg: "{{ item }}"
    state: "latest"
  with_items:
    - "apache2-mpm-prefork"
    - "libapache2-mod-wsgi"
    - "python-pip"
    - "python-gearman"
    - "python-simplejson"

- name: "Check if appraisal tab is present"
  stat: path="{{ archivematica_src_dir }}/archivematica/src/dashboard/src/external/appraisal-tab/"
  register: appraisal_tab

- name: "Install appraisal tab package dependencies"
  apt:
    pkg: "{{ item }}"
    state: "latest"
  when: appraisal_tab.stat.exists == True
  with_items:
    - "npm"

- name: "Fix install path of node vs nodejs via symlink"
  file: src=/usr/bin/nodejs dest=/usr/bin/node state=link
  when: appraisal_tab.stat.exists == True

- name: "Install bower"
  npm: name=bower global=yes
  when: appraisal_tab.stat.exists == True

- name: "Install bower dependencies"
  bower: path="{{ archivematica_src_dir }}/archivematica/src/dashboard/src/external/appraisal-tab/"
  sudo: no
  when: appraisal_tab.stat.exists == True

- name: "Install archivematica-mcp-server package dependencies"
  apt:
    pkg: "{{ item }}"
    state: "latest"
  with_items:
    - "dbconfig-common"
    - "logapp"
    - "python-pyinotify"
    - "python-gearman"
    - "python-mysqldb"
    - "python-lxml"
    - "uuid"



- name: "Install archivematica-mcp-client package dependencies"
  apt:
    pkg: "{{ item }}"
    state: "latest"
  with_items:
    - "atool"
    - "bagit"
    - "bulk-extractor"
    - "clamav"
    - "clamav-daemon"
    - "ffmpeg"
    - "fits"
    - "gearman"
    - "imagemagick"
    - "inkscape"
    - "jhove"
    - "libimage-exiftool-perl"
    - "libxml2-utils"
    - "logapp"
    - "md5deep"
    - "mediainfo"
    - "nfs-common"
    - "openjdk-7-jre-headless"
    - "p7zip-full"
    - "pbzip2"
    - "postfix"
    - "python-fido"
    - "python-gearman"
    - "python-lxml"
    - "python-mysqldb"
    - "python-pyicu"
    - "python-unidecode"
    - "readpst"
    - "rsync"
    - "siegfried"
    - "sleuthkit"
    - "tesseract-ocr"
    - "tika"
    - "tree"
    - "ufraw"
    - "unrar-free"
    - "uuid"



# Have found that installation often stalls in freshclam
# Will download signatures from our repo to try to avoid this

#- name: "Download clamav signatures"
#  command: "freshclam"


# check if clamav files exist already
- stat: path=/var/lib/clamav/bytecode.cvd
  register: clamf1
- stat: path=/var/lib/clamav/bytecode.cld
  register: clamf1a

- stat: path=/var/lib/clamav/daily.cvd
  register: clamf2
- stat: path=/var/lib/clamav/daily.cld
  register: clamf2a

- stat: path=/var/lib/clamav/main.cvd
  register: clamf3
- stat: path=/var/lib/clamav/main.cld
  register: clamf3a

- set_fact:
    clamav_download: "{{ not ( ( clamf1.stat.exists or clamf1a.stat.exists ) and
                               ( clamf2.stat.exists or clamf2a.stat.exists ) and
                               ( clamf3.stat.exists or clamf3a.stat.exists ) ) }}"
- debug: msg="Need to download clamav signatures"
  when: clamav_download

- name: "Get clamav signatures from our github repo"
  git:
    repo=https://github.com/artefactual-labs/clamav-files.git
    dest=/tmp/clamav-files
  when: clamav_download
- name: "Copy clamav signatures to /var/lib/clamav"
  command: cp /tmp/clamav-files/{{ item }} /var/lib/clamav/
  sudo: yes
  with_items:
    - bytecode.cvd
    - daily.cvd
    - main.cvd
  when: clamav_download

- name: "Set user ownership for clamav files"
  file:
    path=/var/lib/clamav
    owner=clamav
    group=clamav
    state=directory
    recurse=yes
  when: clamav_download

- name: "Enable services"
  service:
    name: "{{ item }}"
    state: "started"
    enabled: "yes"
  with_items:
    - "fits"
    - "clamav-daemon"




###########################################################
#   2- python dependencies (pip packages)
###########################################################


- name: "Install archivematica-common pip dependencies"
  pip:
    requirements: "{{ archivematica_src_dir }}/archivematica/src/archivematicaCommon/requirements.txt"

- name: "Install archivematica-dashboard pip dependencies"
  pip:
    requirements: "{{ archivematica_src_dir }}/archivematica/src/dashboard/src/requirements.txt"
