---

- name: "Expand archivematica_src_dir"
  set_fact:
    archivematica_src_dir: "{{ archivematica_src_dir|expanduser }}"

#
# Create `archivematica` user
#

- name: "Create user archivematica"
  user:
    name: "archivematica"
    uid: "333"
    system: "yes"
    groups: "audio"
    home: "/var/lib/archivematica"

#
# Prepare pip
#
- name: "Common configuration for source installs"
  block:
  - name: "Ensure pip is not installed from packages"
    package:
      name: "{{ item }}"
      state: "absent"
    with_items:
      - "python-pip"
      - "python2-pip"

  - name: "Download get-pip.py"
    get_url:
      url: "https://bootstrap.pypa.io/get-pip.py"
      dest: "/root/get-pip.py"

  - name: "Install pip with get-pip.py"
    command: "python get-pip.py"
    args:
      chdir: "/root/"

  - name: "Install virtualenv with pip"
    pip:
      name: "{{ item }}"
      state: "latest"
    with_items:
      - "virtualenv"
#
# Prepare `archivematica_src_dir`
#

  - name: "Create archivematica_src_dir"
    file:
      state: "directory"
      path: "{{ archivematica_src_dir }}"
  when:
    - (archivematica_src_install_am|bool or archivematica_src_install_ss|bool)

#
# Configure RPM repositories and dependencies
#

- name: "Configure rpm-install dependencies"
  block:

  - name: "Install necessary packages required by rpms"
    yum:
      name: "{{ item }}"
      state: "present"
    with_items:
      - "python-virtualenv"
      - "python-pip"

  - name: "Add AM repos"
    yum_repository:
      name: "{{ item.key }}"
      description: "{{ item.key }}"
      baseurl: "{{ item.value.baseurl }}"
      gpgkey: "{{ item.value.gpgkey|default('https://packages.archivematica.org/1.10.x/key.asc') }}"
      gpgcheck: "{{ item.value.gpgcheck|default('1') }}"
    loop: "{{ lookup('dict',archivematica_src_rpm_repositories) }}"

  when: (archivematica_src_install_am == "rpm" or archivematica_src_install_ss == "rpm")

#
# SELinux configuration
#

- name: "Install necessary packages required by this ansible role"
  yum:
    name: "{{ item }}"
    state: "latest"
  with_items:
    - "libsemanage-python"
    - "policycoreutils-python"
  when:
    - ansible_os_family == "RedHat"

- name: "Configure SELinux httpd permissions "
  become: "yes"
  seboolean:
    name: "{{ item }}"
    state: "yes"
    persistent: "yes"
  with_items:
    - "httpd_can_network_connect"       # Allow nginx connections to Gunicorn
    - "httpd_can_network_connect_db"    # Allow nginx to connect to MySQL
    - "httpd_setrlimit"                 # Allow nginx to change system limits
  when:
    - ansible_selinux is defined and ansible_selinux != False and ansible_selinux.status == 'enabled'
    - ansible_os_family == "RedHat"

- name: "SELinux: Allow nginx to use ports 8000 and 8001"
  become: "yes"
  seport:
    ports: "8000,8001"
    proto: "tcp"
    setype: "http_port_t"
    state: "present"
  when:
    - ansible_selinux is defined and ansible_selinux != False and ansible_selinux.status == 'enabled'
    - ansible_os_family == "RedHat"

- name: "Change home dir perms (to make transfer source visible)"
  command: "chmod 755 $HOME"
  tags: "homeperms"
  become: "no"
  when:
    - ansible_os_family == "RedHat"
