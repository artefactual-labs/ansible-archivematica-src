---

- name: "Expand archivematica_src_dir"
  set_fact:
    archivematica_src_dir: "{{ archivematica_src_dir|expanduser }}"

#
# Create `archivematica` user
#

- name: "Create user archivematica"
  user:
    name: "archivematica"
    uid: "333"
    system: "yes"
    groups: "audio"
    home: "/var/lib/archivematica"

#
# Prepare pip
#

- name: "Common configuration for source installs"
  block:
  - name: "Ensure pip is not installed from packages"
    package:
      name:
        - "python-pip"
        - "python2-pip"
      state: "absent"

  - name: "Ensure Python 3 is installed"
    package:
      name: "{{ archivematica_src_python_packages }}"
      state: "present"

  - name: "Get current python3 version"
    shell: "{{ archivematica_src_virtualenv_python }} --version |sed 's/^Python //'"
    args:
      removes: "{{ archivematica_src_virtualenv_python }}"
    register: __python_version_current
    changed_when: '__python_version_current.stdout != archivematica_src_python_version'
    check_mode: no

# Start build python environment block
  - name: "Build python {{ archivematica_src_python_version }} environment"
    block:
    - name: "Install python dependencies to build python"
      package:
        name: "{{ archivematica_src_python_deps }}"
        state: "present"

    - name: "Download python {{ archivematica_src_python_version }}Â source code"
      get_url:
        url: "https://www.python.org/ftp/python/{{ archivematica_src_python_version }}/Python-{{ archivematica_src_python_version }}.tgz"
        force: "yes"
        dest: "/root/Python-{{ archivematica_src_python_version }}.tgz"

    - name: "Unpack python {{ archivematica_src_python_version }} source code"
      unarchive:
        src: "/root/Python-{{ archivematica_src_python_version }}.tgz"
        dest: "/usr/src/"
        remote_src: yes

    - name: "Run 'configure --enable-optimizations' target "
      command: chdir=/usr/src/Python-{{ archivematica_src_python_version }} ./configure --enable-optimizations

    - name: "Run 'make altinstall'"
      make:
        chdir: "/usr/src/Python-{{ archivematica_src_python_version }}"
        target: "altinstall"
        file: "/usr/src/Python-{{ archivematica_src_python_version }}/Makefile"

    - name: "Remove python source code archive"
      file:
        path: "/root/Python-{{ archivematica_src_python_version }}.tgz"
        state: absent

    - name: "Remove python source code dir"
      file:
        path: "/usr/src/Python-{{ archivematica_src_python_version }}"
        state: absent
    when: >
      __python_version_current is not defined or
      __python_version_current.stdout != archivematica_src_python_version
# End build python environment block

  #
  # Prepare `archivematica_src_dir`
  #

  - name: "Create archivematica_src_dir"
    file:
      state: "directory"
      path: "{{ archivematica_src_dir }}"
  when:
    - (archivematica_src_install_am|bool or archivematica_src_install_ss|bool)

#
# Configure RPM repositories and dependencies
#

- name: "Configure rpm-install dependencies"
  block:

  - name: "Install necessary packages required by rpms"
    yum:
      name:
        - "python-virtualenv"
        - "python-pip"
      state: "present"

  - name: "Add AM repos"
    yum_repository:
      name: "{{ item.key }}"
      description: "{{ item.key }}"
      baseurl: "{{ item.value.baseurl }}"
      gpgkey: "{{ item.value.gpgkey|default('https://packages.archivematica.org/1.10.x/key.asc') }}"
      gpgcheck: "{{ item.value.gpgcheck|default('1') }}"
    loop: "{{ lookup('dict',archivematica_src_rpm_repositories) }}"

  when: (archivematica_src_install_am == "rpm" or archivematica_src_install_ss == "rpm")

#
# SELinux configuration
#

- name: "Configure SELinux httpd permissions"
  become: "yes"
  seboolean:
    name: "{{ item }}"
    state: "yes"
    persistent: "yes"
  with_items:
    - "httpd_can_network_connect"       # Allow nginx connections to Gunicorn
    - "httpd_can_network_connect_db"    # Allow nginx to connect to MySQL
    - "httpd_setrlimit"                 # Allow nginx to change system limits
  when:
    - ansible_selinux is defined and ansible_selinux != False and ansible_selinux.status == 'enabled'
    - ansible_os_family == "RedHat"

- name: "SELinux: Allow nginx to use ports 8000 and 8001"
  become: "yes"
  seport:
    ports: "8000,8001"
    proto: "tcp"
    setype: "http_port_t"
    state: "present"
  when:
    - ansible_selinux is defined and ansible_selinux != False and ansible_selinux.status == 'enabled'
    - ansible_os_family == "RedHat"

- name: "Change home dir perms (to make transfer source visible)"
  command: "chmod 755 $HOME"
  tags: "homeperms"
  become: "no"
  when:
    - ansible_os_family == "RedHat"
