---
# ss-configure

# Create api-key if not defined
- set_fact: archivematica_src_configure_ss_api_key={{ 999999999999999999999 | random | to_uuid | hash('md5') }}
  when: "archivematica_src_configure_ss_api_key is undefined and archivematica_src_configure_ss|bool"

# Check whether SS user exists
- name:  Check SS default test user
  become: "yes"
  command: sqlite3  "{{archivematica_src_ss_environment['SS_DB_NAME']}}" "select username from auth_user where (id=1 and last_login is NULL and first_name='' and last_name='' and email='x@x.com' and username='test');"
  register: ss_default_test_user

- debug:
    msg: "The SS default test user is already configured and never was used: this user will be deleted."
  when: ss_default_test_user.stdout != "" and archivematica_src_configure_ss|bool

# Delete default SS superuser test
- name: "Delete default SS superuser"
  become: "yes"
  ignore_errors: "yes"
  shell: echo "from django.contrib.auth.models import User;User.objects.get(username='test').delete()" | {{ archivematica_src_ss_virtualenv }}/bin/python manage.py shell
  args:
    chdir: "{{ archviematica_src_ss_app }}"
    executable: /bin/bash
  environment: "{{ archivematica_src_ss_environment }}"
  when: archivematica_src_configure_ss|bool and ss_default_test_user.stdout != ""

# Check whether SS user exists
- name:  Check SS user
  become: "yes"
  command: sqlite3  "{{archivematica_src_ss_environment['SS_DB_NAME']}}" "select username from auth_user where username='{{ archivematica_src_configure_ss_user }}';"
  register: ss_user

- debug:
    msg: "The SS user {{ archivematica_src_configure_ss_user }} is already configured: The SS superuser will not be created."
  when: ss_user.stdout != "" and archivematica_src_configure_ss|bool

- name: "Create SS superuser"
  django_manage:
    command: > 
      create_user 
      --username="{{ archivematica_src_configure_ss_user }}"
      --password="{{ archivematica_src_configure_ss_password }}" 
      --email="{{ archivematica_src_configure_ss_email }}"
      --api-key="{{ archivematica_src_configure_ss_api_key }}" 
      --superuser
    app_path: "{{ archviematica_src_ss_app }}"
    virtualenv: "{{ archivematica_src_ss_virtualenv }}"
  environment: "{{ archivematica_src_ss_environment }}"
  when: archivematica_src_configure_ss|bool and ss_user.stdout == ""

# dashboard-configure

# Check whether pipeline is registered and dashboard user exists
- name:  Check Dashboard SS url
  become: "yes"
  command: mysql {{ archivematica_src_am_db_name }} -Ns -e "select * from DashboardSettings where name='storage_service_url'"
  register: dashboard_ss_url

- debug:
    msg: "The pipeline is already configured: The dashboard superuser will not be created and the pipeline will not be registered."
  when: dashboard_ss_url.stdout != "" and archivematica_src_configure_dashboard|bool

- name:  Check Dashboard user
  become: "yes"
  command: mysql {{ archivematica_src_am_db_name }} -Ns -e "select * from auth_user where username='{{ archivematica_src_configure_am_user }}'"
  register: dashboard_user

- debug:
    msg: "The dashboard user {{ archivematica_src_configure_am_user }} is already configured: The dashboard superuser will not be created and the pipeline will not be registered."
  when: dashboard_user.stdout != "" and archivematica_src_configure_dashboard|bool

# Create api-key if not defined
- set_fact: archivematica_src_configure_am_api_key={{ 999999999999999999998 | random | to_uuid | hash('md5') }}
  when: archivematica_src_configure_am_api_key is undefined

- name: "Create Dashboard user and register pipeline on SS"
  django_manage:
    command: >
      install 
      --username="{{ archivematica_src_configure_am_user }}"
      --password="{{ archivematica_src_configure_am_password }}"
      --email="{{ archivematica_src_configure_am_email }}"
      --org-name="{{ archivematica_src_configure_am_org_name }}"
      --org-id="{{ archivematica_src_configure_am_org_id }}"
      --api-key="{{ archivematica_src_configure_am_api_key }}"
      --ss-url="{{ archivematica_src_configure_ss_url }}"
      --ss-user="{{ archivematica_src_configure_ss_user }}"
      --ss-api-key="{{ archivematica_src_configure_ss_api_key }}"
      --whitelist="{{archivematica_src_configure_am_whitelist}}"
    app_path: "{{ archivematica_src_am_dashboard_app }}"
    pythonpath: "{{ archivematica_src_am_common_app }}"
    virtualenv: "{{ archivematica_src_am_dashboard_virtualenv }}"
  environment: "{{ archivematica_src_am_dashboard_environment }}"
  when: archivematica_src_configure_dashboard|bool and dashboard_user.stdout == "" and dashboard_ss_url.stdout == ""

- name: "Configure Dashboard settings"
  command: >
    mysql --user="{{archivematica_src_am_db_user }}"
          --password="{{ archivematica_src_am_db_password }}"
          --host="{{ archivematica_src_am_db_host }}"
          "{{ archivematica_src_am_db_name }}"
          --batch --skip-column-names
          --execute="update DashboardSettings set value=\"{{ item.value }}\" where name=\"{{ item.key }}\";"
  loop:
    "{{ lookup('dict', archivematica_src_configure_dashboardsettings ,wantlist=True) }}"
  no_log: True
  when: archivematica_src_configure_dashboardsettings is defined

- name: "Create ssh folder"
  file:
    path: "/var/lib/archivematica/.ssh/"
    owner: archivematica
    group: archivematica
    state: directory
    mode: 0755
  when: archivematica_src_configure_dashboardsettings is defined

- name: "Create ssh key"
  command: ssh-keygen -q -t rsa -f /var/lib/archivematica/.ssh/id_rsa -C "{{ ansible_host }}" -N ""
  args:
    creates: /var/lib/archivematica/.ssh/id_rsa
  when: archivematica_src_configure_dashboardsettings is defined

- name: "Update permissions for key"
  file:
    path: "/var/lib/archivematica/.ssh/{{ item }}"
    owner: archivematica
    group: archivematica
    state: file
    mode: 0600
  with_items:
    - id_rsa
    - id_rsa.pub
  when: archivematica_src_configure_dashboardsettings is defined

- name: "Register ssh key"
  command: cat /var/lib/archivematica/.ssh/id_rsa.pub
  register: ssh_key
  when: archivematica_src_configure_dashboardsettings is defined

- name: "Show ssh key"
  debug: msg={{ ssh_key.stdout_lines }}
  when: archivematica_src_configure_dashboardsettings is defined

