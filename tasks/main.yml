---

#
# Common tasks
#

- name: "Load OS-specific vars"
  include_vars: "{{ ansible_os_family }}.yml"
  tags:
    - "always" # inocuous to use always here

- name: "Load default environment strings"
  include_vars: "envs.yml"
  tags: "always"

- name: "Combine environment strings"
  set_fact:
    "{{ item.combined }}": "{{ item.defaults|combine(item.provided, recursive=False) }}"
  with_items:
    - combined: "archivematica_src_am_dashboard_environment"
      provided: "{{ archivematica_src_am_dashboard_environment|default({}) }}"
      defaults: "{{ _archivematica_src_am_dashboard_environment }}"
    - combined: "archivematica_src_am_mcpserver_environment"
      provided: "{{ archivematica_src_am_mcpserver_environment|default({}) }}"
      defaults: "{{ _archivematica_src_am_mcpserver_environment }}"
    - combined: "archivematica_src_am_mcpclient_environment"
      provided: "{{ archivematica_src_am_mcpclient_environment|default({}) }}"
      defaults: "{{ _archivematica_src_am_mcpclient_environment }}"
    - combined: "archivematica_src_ss_environment"
      provided: "{{ archivematica_src_ss_environment|default({}) }}"
      defaults: "{{ _archivematica_src_ss_environment }}"
  tags: "always"

# Append SS_GUNICORN_WORKERS=3 only when SS_GUNICORN_WORKERS
# is not defined in dictionary and MySQL database
- name: "Append default SS_GUNICORN_WORKERS when using MySQL"
  set_fact:
    "{{ item.name }}": "{{ item.dict|combine({item.key: 3}) }}"
  with_items:
    - name: "archivematica_src_ss_environment"
      dict: "{{ archivematica_src_ss_environment }}"
      key: "SS_GUNICORN_WORKERS"
  when:
    - archivematica_src_ss_environment['SS_DB_URL'] is defined
    - archivematica_src_ss_environment['SS_GUNICORN_WORKERS'] is not defined
  tags: "always"

- include: "envs-patch-backward-compatibility.yml"
  tags: "always"

# Uncomment if you want to debug the environment strings.
# - debug:
#     msg: "{{ item.dict }}"
#   with_items:
#     - name: "archivematica_src_am_dashboard_environment"
#       dict: "{{ archivematica_src_am_dashboard_environment }}"
#     - name: "archivematica_src_am_mcpserver_environment"
#       dict: "{{ archivematica_src_am_mcpserver_environment }}"
#     - name: "archivematica_src_am_mcpclient_environment"
#       dict: "{{ archivematica_src_am_mcpclient_environment }}"
#     - name: "archivematica_src_ss_environment"
#       dict: "{{ archivematica_src_ss_environment }}"

- name: "Set fact: type of environment"
  set_fact:
    is_dev: "{{ archivematica_src_environment_type == 'development' }}"
    is_prod: "{{ archivematica_src_environment_type == 'production' }}"
  tags: "always" # inocuous to use always here


- name: "Configure common prerequisites"
  block:

  - name: "Include common-RHEL.yml for RHEL"
    include: "common-RHEL.yml"
    when:
      - "ansible_distribution == 'RedHat'"

  - name: "Install necessary packages required by this role"
    package:
      name: "{{ ansible_deps }}"
      state: "latest"

  - name: "Include common.yml common tasks for all components"
    include: "common.yml"
    tags: # do not use "always" tag in role, to avoid issues when including other roles in a playbook
      - "amsrc-common"
      - "amsrc-ss"
      - "amsrc-pipeline"
      - "amsrc-automationtools"
      - "amsrc-fixity"

  when:
    - "archivematica_src_install_ss|bool or
       archivematica_src_install_ss=='rpm' or
       archivematica_src_install_am|bool or
       archivematica_src_install_am=='rpm'"


- name: "Checkout out archivematica-sampledata repository"
  git:
    repo: "https://github.com/artefactual/archivematica-sampledata.git"
    dest: "~/archivematica-sampledata"
    update: "yes"
    depth: 1
  when: "archivematica_src_install_sample_data|bool"
  async: "{{ archivematica_src_install_sample_data_timeout }}"
  poll: 0
  register: "sampledata_clone"
  become: "no"


#
# archivematica-storage-service
#

- include: "ss-main.yml"
  tags:
    - "amsrc-ss"
  when:
    - "archivematica_src_install_ss|bool"

- name: "Install archivematica storage service rpm"
  yum:
    name: archivematica-storage-service
    state: latest
  when:
    - archivematica_src_install_ss == "rpm"

- name: "Complete storage service deployment"
  block:
  - include: "ss-db.yml"
    tags:
      - "amsrc-ss"
      - "amsrc-ss-db"
  - include: "ss-osconf.yml"
    tags:
      - "amsrc-ss"
      - "amsrc-ss-osconf"
  - include: "ss-websrv-gunicorn.yml"
    tags:
      - "amsrc-ss"
      - "amsrc-ss-websrv"
  when: "archivematica_src_install_ss|bool"


#
# Pipeline:
# - archivematica-dashboard
# - archivematica-mcp-server
# - archivematica-mcp-client
#
#   0- Clone source repo
#   1- OS dependencies (debian packages)
#   2- python dependencies (pip packages)
#   3- OS configuration (user/directory/file creation/permissions/ownership)
#   4- Code install
#   5- Database config
#   6- web server config
- name: "Install from source"
  block:
  - include: "pipeline-clonecode.yml"
    tags:
      - "amsrc-pipeline"
      - "amsrc-pipeline-clonecode"

  - include: "pipeline-osdeps.yml"
    tags:
      - "amsrc-pipeline"
      - "amsrc-pipeline-osdeps"

  - include: "pipeline-pip-deps.yml"
    tags:
      - "amsrc-pipeline"
      - "amsrc-pipeline-pipdeps"
  - include: "pipeline-osconf.yml"
    tags:
      - "amsrc-pipeline"
      - "amsrc-pipeline-osconf"

  - include: "pipeline-instcode.yml"
    tags:
      - "amsrc-pipeline"
      - "amsrc-pipeline-instcode"
  when:
    - "archivematica_src_install_am|bool"

- name: "Install archivematica using packages"
  yum:
    name: "archivematica-common,archivematica-dashboard,archivematica-mcp-server,archivematica-mcp-client"
    state: "latest"
  when:
    - archivematica_src_install_am == "rpm"

- name: "Complete AM deployment"
  block:
  - include: "pipeline-dbconf.yml"
    tags:
      - "amsrc-pipeline"
      - "amsrc-pipeline-dbconf"

  - include: "pipeline-es.yml"
    tags:
      - "amsrc-pipeline"
      - "amsrc-pipeline-es"

  - include: "pipeline-environment.yml"
    tags:
      - "amsrc-pipeline"
      - "amsrc-pipeline-environment"

  - include: "pipeline-websrv-gunicorn.yml"
    tags:
      - "amsrc-pipeline"
      - "amsrc-pipeline-websrv"

  when: "archivematica_src_install_am|bool"


#
# archivematica-sampledata
#
# Wait for git to finish sampledata clone
- name: "Wait for sampledata download completion"
  async_status:
    jid: "{{ sampledata_clone.ansible_job_id }}"
  when: "archivematica_src_install_sample_data|bool"
  register: "sampledata_clone_result"
  until: "sampledata_clone_result.finished"
  delay: 60
  retries: "{{ ( archivematica_src_install_sample_data_timeout|int / 60 )|int|abs }}"
  become: "no"

- name: "Generate special sampledata transfers"
  command: "make simple"
  args:
    chdir: "~/archivematica-sampledata/"
  environment:
    LC_ALL: "en_US.utf8"
  when: "archivematica_src_install_sample_data|bool"
  become: "no"


#
# automation-tools
#

- include: "automation-tools.yml"
  tags:
    - "amsrc-automationtools"
  when: "archivematica_src_install_automationtools|bool"


#
# acceptance-tests
#

- include: "acceptance-tests.yml"
  tags:
    - "amsrc-acceptancetests"
  when: "archivematica_src_install_acceptance_tests|bool"


#
# fixity
#

- include: "fixity.yml"
  tags:
    - "amsrc-fixity"
  when: "archivematica_src_install_fixity|bool"

#
# Configure pipeline and SS
#

- include: "configure.yml"
  tags:
    - "amsrc-configure"
  when: "archivematica_src_configure_ss|bool or archivematica_src_configure_dashboard|bool"

#
# Configure GPG locations
#

- include: "configure-gpg.yml"
  tags:
    - "amsrc-configure"
  when:
    - "archivematica_src_install_ss|bool or archivematica_src_install_ss=='rpm'"
    - "archivematica_src_configure_gpg is defined"
