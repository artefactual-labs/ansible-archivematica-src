---
###########################################################
#   pipeline OS dependencies
###########################################################

#######################################################################
# Install dependencies according to osdeps dicts
#######################################################################

# ubuntu block
- block:
    - name: "Install mediaarea.net repo (mediaconch, mediainfo) (Ubuntu >=20.04)"
      apt:
        deb: "https://mediaarea.net/repo/deb/repo-mediaarea_1.0-21_all.deb"
      when:
        - "ansible_distribution_version is version('20.04', '>=')"

    - name: "Update apt cache (Ubuntu >=20.04)"
      apt:
        update_cache: yes
      when:
        - "ansible_distribution_version is version('20.04', '>=')"

    - name: "Install External dependency repo keys (Ubuntu)"
      apt_key:
        id: "{{ item.id }}"
        url: "{{ item.url }}"
        state: "present"
        validate_certs: "{{ item.validate_certs }}"
      with_items: 
        - "{{ dashboard_osdeps.repokeys + MCPServer_osdeps.repokeys + MCPClient_osdeps.repokeys }}"
      when:
        - dashboard_osdeps.repokeys + MCPServer_osdeps.repokeys + MCPClient_osdeps.repokeys

    - name: "Add External dependency repos (Ubuntu)"
      apt_repository:
        repo: "{{ item }}"
        state: "present"
      with_items:
        - "{{ dashboard_osdeps.repos + MCPServer_osdeps.repos + MCPClient_osdeps.repos }}"
      when:
        - dashboard_osdeps.repos + MCPServer_osdeps.repos + MCPClient_osdeps.repos

  when:
    - ansible_distribution == "Ubuntu"
# End Ubuntu block 

# Centos/RH block
- block:
    - name: "Enable powertools repo on Centos/Rocky 8"
      # Needed by fits, ffmpeg, mediainfo and mediaconch
      command: "dnf config-manager --set-enabled powertools"
      when:
        - ansible_distribution not in ['RedHat']
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version|int == 8

    - name: "Enable CodeReady Linux Builder Repository on RHEL 8"
      # Needed by fits, ffmpeg, mediainfo and mediaconch
      command: "subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms"
      failed_when: false
      changed_when: false
      check_mode: false
      when:
        - ansible_distribution in ['RedHat']
        - ansible_distribution_major_version|int == 8

    - name: "Add External repo keys (RH/CentOS/Rocky)"
      rpm_key:
        state: present
        key: "{{ item }}"
      with_items:
        - "{{ dashboard_osdeps.repokeys + MCPServer_osdeps.repokeys + MCPClient_osdeps.repokeys }}"
      when:
        - dashboard_osdeps.repokeys + MCPServer_osdeps.repokeys + MCPClient_osdeps.repokeys

    - name: "Add External dependency repos (RH/CentOS/Rocky)"
      yum_repository:
        name: "{{ item['name'] }}"
        description: "{{ item['description'] }}"
        baseurl: "{{ item['baseurl'] }}"
        gpgcheck: "{{ item['gpgcheck'] }}"
        enabled: "{{ item['enabled'] }}"
      with_items:
        - "{{ dashboard_osdeps.repos + MCPServer_osdeps.repos + MCPClient_osdeps.repos }}"
      when:
        - dashboard_osdeps.repos + MCPServer_osdeps.repos + MCPClient_osdeps.repos

  when:
    - ansible_os_family in [ 'RedHat', 'Rocky' ]
    - install_rpm_repositories|bool
# End RH/CentOS/Rocky block

# Not using package in next task because it is slower than apt or yum modules.
# The package module is not installing the every list of packages at the same time
# But yum or apt modules doesn't allow loops (deprecated) so the trick is using the
# install-packages.yml task file

- include_tasks: "install-packages.yml"  # We need to use include_tasks and not import_tasks because it contains dynamic data in loop
  vars:
    packages: "{{ item.packages }}"
    name: "{{ item.name }}"
  when:
    - item.packages|length>0
  loop:
    - { name: 'Dashboard osdeps 1', packages: "{{ dashboard_osdeps.packages | default([]) }}" }
    - { name: 'Dashboard osdeps 2', packages: "{{ dashboard_osdeps.packages_2 | default([]) }}" }
    - { name: 'Dashboard osdeps 3', packages: "{{ dashboard_osdeps.packages_3 | default([]) }}" }
    - { name: 'MCPServer osdeps 1', packages: "{{ MCPServer_osdeps.packages | default([]) }}" }
    - { name: 'MCPServer osdeps 2', packages: "{{ MCPServer_osdeps.packages_2 | default([]) }}" }
    - { name: 'MCPServer osdeps 3', packages: "{{ MCPServer_osdeps.packages_3 | default([]) }}" }
    - { name: 'MCPClient osdeps 1', packages: "{{ MCPClient_osdeps.packages | default([]) }}" }
    - { name: 'MCPClient osdeps 2', packages: "{{ MCPClient_osdeps.packages_2 | default([]) }}" }
    - { name: 'MCPClient osdeps 3', packages: "{{ MCPClient_osdeps.packages_3 | default([]) }}" }

#
# FITS via Nailgun
#

- name: Create systemd init file for fits (Ubuntu 16.04)
  template:
     src: "etc/systemd/system/fits-nailgun.service.j2"
     dest: "/etc/systemd/system/fits-nailgun.service"
  when:
    - ansible_service_mgr == "systemd" and ansible_distribution == "Ubuntu"

- name: "Enable and start fits-nailgun (Systemd)"
  systemd:
    name: "fits-nailgun"
    state: "started"
    enabled: "yes"
    daemon_reload: "yes"
  when:
    - ansible_service_mgr == "systemd"

