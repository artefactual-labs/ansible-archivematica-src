---
###########################################################
#   pipeline OS dependencies
###########################################################

#######################################################################
#  Notes:
#  - Recent archivematica branches to include osdeps file per component
#    (e.g., src/MCPServer/osdeps/Ubuntu-14.yml,
#     src/dashboard/osdeps/Ubuntu-14.yml)
#  - "Component" refer to any of dashboard, MCPServer, and MCPClient
#  - osdeps files contains the following information
#      - repository keys
#      - repository names
#      - packages
#  - If this role finds osdeps files for the OS of the target VM
#    (matching distribution and version), it will configure
#    dependencies according to these files
############################################################

# osdeps filenames in the archivematica repo are something like "Ubuntu-14.04.json"
- set_fact:
    osdeps_file: "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.json"
    tmpdirname: "/tmp/amsrc-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }}"
    comps:
      - "MCPServer"
      - "MCPClient"
      - "dashboard"

# become: false is required in tasks delegated to localhost
# (to avoid "sudo: a password is required" error)
- name: "create temp directory in local machine to store osdeps files"
  file:
    path: "{{ tmpdirname }}/osdeps"
    state: "directory"
  become: false
  delegate_to: "127.0.0.1"

- name: "fetch dependencies files from source code repository to local machine"
  fetch:
    src: "{{ archivematica_src_dir }}/archivematica/src/{{ item }}/osdeps/{{ osdeps_file }}"
    dest: "{{ tmpdirname }}/osdeps/{{ item }}/{{ osdeps_file }}"
    flat: "yes"
  with_items: "{{ comps }}"

# determine which components have osdeps files

- command: "ls -1 {{ tmpdirname }}/osdeps"
  register: ls_osdeps
  become: false
  delegate_to: "127.0.0.1"

- set_fact:
    comps_osdeps: "{{ ls_osdeps.stdout.splitlines() }}"
    comps_no_osdeps: "{{ comps }}"
- set_fact:
    comps_no_osdeps: "{{ comps_no_osdeps | difference(comps_osdeps) }}"
# for some reason just trying to do comps_no_osdeps: "{{ comps | difference(comps_osdeps) }}" didn't work
- debug:
    msg: "comps is {{ comps }}, comps_osdeps is {{ comps_osdeps }}, comps_no_osdeps is {{ comps_no_osdeps }}"

# create a namespace for each component that has a dependencies file
- name: "include variables from retrieved dependencies files"
  include_vars:
    file: "{{ tmpdirname }}/osdeps/{{ item }}/{{ osdeps_file }}"
    name: "{{ item }}"
  with_items: "{{ comps_osdeps }}"

#######################################################################
# Install dependencies according to osdeps files in the archivematica
# source code repository
#######################################################################

# (Couldn't find a way to loop within components for tasks below,
#  can't use ansible nested loops for this case)

- name: "include pipeline-osdeps-MCPServer"
  include_tasks: "pipeline-osdeps-MCPServer.yml"
  when: MCPServer is defined

- name: "include pipeline-osdeps-MCPClient"
  include_tasks: "pipeline-osdeps-MCPClient.yml"
  when: MCPClient is defined

- name: "include pipeline-osdeps-dashboard"
  include_tasks: "pipeline-osdeps-dashboard.yml"
  when: dashboard is defined

#
# FITS via Nailgun
#

- name: Create systemd init file for fits (Ubuntu 16.04)
  template:
     src: "etc/systemd/system/fits-nailgun.service.j2"
     dest: "/etc/systemd/system/fits-nailgun.service"
  when:
    - ansible_service_mgr == "systemd" and ansible_distribution == "Ubuntu"

- name: "Enable and start fits-nailgun (Systemd)"
  systemd:
    name: "fits-nailgun"
    state: "started"
    enabled: "yes"
    daemon_reload: "yes"
  when:
    - ansible_service_mgr == "systemd"

