---
###########################################################
#   pipeline OS dependencies
###########################################################

#######################################################################
#  Notes:
#  - Recent archivematica branches to include osdeps file per component
#    (e.g., src/archivematicaCommon/osdeps/Ubuntu-14.yml, 
#     src/dashboard/osdeps/Ubuntu-14.yml)
#  - "Component" refer to any of archivematicaCommon, dashboard, 
#    MCPServer, MCPClient 
#  - osdeps files contains the following information
#      - repository keys
#      - repository names
#      - packages
#  - If this role finds osdeps files for the OS of the target VM 
#    (matching distribution and version), it will configure 
#    dependencies according to these files 
#  - If this role doesn't find any osdeps file for the OS, it 
#    will use the role defaults 
############################################################

# osdeps filenames in the archivematica repo are something like "Ubuntu-14.04.json"
- set_fact: 
    osdeps_file: "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.json"
    tmpdirname: "/tmp/amsrc-{{ ansible_date_time.date }}-{{ ansible_date_time.epoch }}"
    comps: "[ 'archivematicaCommon', 'MCPServer', 'MCPClient', 'dashboard' ]"

# become: false is required in tasks delegated to localhost 
# (to avoid "sudo: a password is required" error)
- name: "create temp directory in local machine to store osdeps files"
  file: 
    path: "{{ tmpdirname }}/osdeps"
    state: "directory"
  become: false
  delegate_to: "127.0.0.1"

- name: "fetch dependencies files from source code repository to local machine"
  fetch:
    src: "{{ archivematica_src_dir }}/archivematica/src/{{ item }}/osdeps/{{ osdeps_file }}"
    dest: "{{ tmpdirname }}/osdeps/{{ item }}/{{ osdeps_file }}"
    flat: "yes" 
  with_items: "{{ comps }}"

# determine which components have osdeps files

- command: "ls -1 {{ tmpdirname }}/osdeps"
  register: ls_osdeps
  become: false
  delegate_to: "127.0.0.1"

- set_fact:
    comps_osdeps: "{{ ls_osdeps.stdout.splitlines() }}"
    comps_no_osdeps: "{{ comps }}"
- set_fact:
    comps_no_osdeps: "{{ comps_no_osdeps | difference(comps_osdeps) }}"
# for some reason just trying to do comps_no_osdeps: "{{ comps | difference(comps_osdeps) }}" didn't work
- debug:
    msg: "comps is {{ comps }}, comps_osdeps is {{ comps_osdeps }}, comps_no_osdeps is {{ comps_no_osdeps }}"

# create a namespace for each component that has a dependencies file
- name: "include variables from retrieved dependencies files"
  include_vars: 
    file: "{{ tmpdirname }}/osdeps/{{ item }}/{{ osdeps_file }}"
    name: "{{ item }}"
  with_items: "{{ comps_osdeps }}"

#######################################################################
# Install dependencies according to osdeps files in the archivematica 
# source code repository
#######################################################################

# (Couldn't find a way to loop within components for tasks below, 
#  can't use ansible nested loops for this case)

- name: "include pipeline-osdeps-archivematicaCommon"
  include: "pipeline-osdeps-archivematicaCommon.yml"
  static: no
  when: archivematicaCommon is defined

- name: "include pipeline-osdeps-MCPServer"
  include: "pipeline-osdeps-MCPServer.yml"
  static: no
  when: MCPServer is defined

- name: "include pipeline-osdeps-MCPClient"
  include: "pipeline-osdeps-MCPClient.yml"
  static: no
  when: MCPClient is defined

- name: "include pipeline-osdeps-dashboard"
  include: "pipeline-osdeps-dashboard.yml"
  static: no
  when: dashboard is defined

#######################################################################
# if no osdeps files, fallback to legacy tasks 
# (install dependencies using the default values in this role)
#######################################################################

# run fallback tasks if comps_osdeps is empty 
# (i.e., no osdeps json file found for any component, for the target OS, in the AM source repo)
# only for ubuntu 14, error if not
- name: "include pipeline-osdeps-fallback"
  include: "pipeline-osdeps-fallback.yml"
  static: no
  when: 
    - not comps_osdeps
    - ansible_distribution=="Ubuntu" and ansible_distribution_major_version=="14"

## error if no osdeps file and not ubuntu 14
- name: "error if no osdeps and no fallback"
  fail: 
    msg: "Error: no osdeps and no fallback for this distro version"
  when: 
    - not comps_osdeps 
    - not (ansible_distribution=="Ubuntu" and ansible_distribution_major_version=="14")

- name: "Enable and start fits (Ubuntu)"
  service:
    name: "fits"
    state: "started"
    enabled: "yes"
  when: ansible_distribution=="Ubuntu"

- name: "Enable and start fits-nailgun (RedHat)"
  service:
    name: "fits-nailgun"
    state: "started"
    enabled: "yes"
  when: ansible_os_family=="RedHat"

