---
## Configure remote pipeline

# Create key

- name: "Configure SS: Create ssh key"
  user:
    name: "archivematica"
    generate_ssh_key: "yes"
    ssh_key_type: "ed25519"
    ssh_key_file: ".ssh/id_ed25519"

- name: "Configure SS: Register ssh key"
  command: cat /var/lib/archivematica/.ssh/id_ed25519.pub
  register: ssh_key

- name: "Configure SS: Show ssh key"
  debug: msg={{ ssh_key.stdout_lines }}

# Get id of the associated pipeline
- name: "Configure SS: get default pipeline UUID from SS database"
  mysql_query:
    login_db: "{{ archivematica_src_ss_db_name }}"
    login_user: "{{ archivematica_src_ss_db_user }}"
    login_password: "{{ archivematica_src_ss_db_password }}"
    query: >
           SELECT uuid FROM locations_pipeline WHERE remote_name like %(pipeline)s;
    named_args:
      pipeline: "%{{ am_ss_remote_pipeline }}%"
  register: pipeline_uuid_query

- name: "Set pipeline_uuid"
  set_fact:
    pipeline_uuid: "{{ (pipeline_uuid_query.query_result |flatten | first).uuid }}"
  when: pipeline_uuid_query.rowcount|int > 0
 
# If pipeline_uuid exists, configure the space and locations
- name: "Configure SS: Configure pipeline local filesystem space and locations"
  block:

    - name: "Configure SS: Populate known_hosts"
      become: "yes"
      become_user: "archivematica"
      shell: "ssh-keyscan -H {{ am_ss_remote_pipeline }} >> ~/.ssh/known_hosts"
      ignore_errors: true

    - name: "Add ssh key to pipeline server"
      authorized_key:
        user: "archivematica"
        state: "present"
        key: "{{ ssh_key.stdout }}"
      delegate_to: "{{ item }}"
      loop: "{{ groups['dashboard'] }}"
      remote_user: "{{ ansible_ssh_user }}"

    - name: "Check if a remote space for this host exist"
      uri:
        url: "{{ archivematica_src_configure_ss_url }}/api/v2/space/?access_protocol=PIPE_FS"
        headers:
          Authorization: "ApiKey {{ archivematica_src_configure_ss_user }}:{{ archivematica_src_configure_ss_api_key }}"
      register: "space_list"

    - name: "Register remote hostname"
      set_fact:
        remote_hostname: "{{ space_list.json.objects|json_query('[*].remote_name')|regex_search('{{ am_ss_remote_pipeline }}') }}"

    - name: "Check uuid for local filesystem space"
      uri:
        url: "{{ archivematica_src_configure_ss_url }}/api/v2/space/?access_protocol=FS"
        headers:
          Authorization: "ApiKey {{ archivematica_src_configure_ss_user }}:{{ archivematica_src_configure_ss_api_key }}"
      register: "local_space_list"
      when: remote_hostname  != "{{ am_ss_remote_pipeline }}"

    - name: "Set uuid for default filesystem space"
      set_fact:
         local_space_uuid: "{{ local_space_list.json.objects[0].uuid }}"
      when: remote_hostname != "{{ am_ss_remote_pipeline }}"

    - name: "Disable current processing location on local fs"
      mysql_query:
        login_db: "{{ archivematica_src_ss_db_name }}"
        login_user: "{{ archivematica_src_ss_db_user }}"
        login_password: "{{ archivematica_src_ss_db_password }}"
        query: >
             UPDATE locations_location set enabled=0 where purpose = 'CP' and space_id=%(uuid)s;
        named_args:
          uuid: "{{ local_space_uuid }}"
      when: remote_hostname != "{{ am_ss_remote_pipeline }}"

    - name: "Configure SS: add remote space"
      uri:
        url: "{{ archivematica_src_configure_ss_url }}/api/v2/space/"
        headers:
          Content-Type: "application/json"
          Authorization: "ApiKey {{ archivematica_src_configure_ss_user }}:{{ archivematica_src_configure_ss_api_key }}"
        body:
          access_protocol: "PIPE_FS"
          path: "/"
          staging_path: "/var/archivematica/storage_service"
          remote_name: "{{ am_ss_remote_pipeline }}"
          rsync_password: "{{ am_ss_remote_pipeline }}"
          assume_rsync_daemon: "False"
          remote_user: "archivematica"
        body_format: json
        status_code: 201
        method: POST
      when: remote_hostname != "{{ am_ss_remote_pipeline }}"
      register: "space_created"

    - name: "Set remote space uuid"
      set_fact:
        space_uuid: "{{ space_created.json.uuid }}"
      when: remote_hostname != "{{ am_ss_remote_pipeline }}"

    - name: "Configure SS: add custom locations"
      uri:
        url: "{{ archivematica_src_configure_ss_url }}/api/v2/location/"
        headers:
          Content-Type: "application/json"
          Authorization: "ApiKey {{ archivematica_src_configure_ss_user }}:{{ archivematica_src_configure_ss_api_key }}"
        body:
          pipeline: ["/api/v2/pipeline/{{ pipeline_uuid }}/"]
          purpose: "{{ item.location_purpose }}"
          relative_path: "{{ item.location_path | regex_replace('^\\/', '') }}"
          description: "{{ item.location_description }}"
          space: "/api/v2/space/{{ space_uuid }}/"
          default: "{{ item.location_default }}"
        body_format: json
        status_code: 201
        method: POST
      with_items: "{{ am_ss_remote_locations }}"
      tags: "configure-am"
      when: am_ss_remote_locations is defined
  when: pipeline_uuid_query.rowcount|int > 0
