---

- name: "Destroy virtualenv when it's using a different version"
  block:
    - name: "Capture current Python version"
      command: |-
        {{ archivematica_src_am_virtualenv }}/bin/python -c
          'import sys; print("python"+str(sys.version_info[0])+"."+str(sys.version_info[1]))'
      failed_when: false
      changed_when: false
      check_mode: false
      register: "pyver_check"
    - name: "Destroy Python virtualenv when it's using a different version"
      file:
        path: "{{ archivematica_src_am_virtualenv }}"
        state: "absent"
      when: "pyver_check.rc == 0 and pyver_check.stdout != archivematica_src_virtualenv_python"

- name: "Ensure archivematica user can create virtualenv"
  file:
    path: "{{ archivematica_src_am_virtualenv | dirname }}"
    owner: "archivematica"
    group: "archivematica"
    state: "directory"

- name: "Create virtualenv and install pip-tools"
  become: "yes"
  become_user: "archivematica"
  pip:
    virtualenv: "{{ archivematica_src_am_virtualenv }}"
    virtualenv_command: "{{ archivematica_src_virtualenv }}"
    virtualenv_python: "{{ archivematica_src_virtualenv_python }}"
    name: 
      - "pip=={{ archivematica_src_pip_version }}"
      - "pip-tools=={{ archivematica_src_pip_tools_version }}"

- name: "Synchronize requirements"
  become: "yes"
  become_user: "archivematica"
  command: "{{ archivematica_src_am_virtualenv }}/bin/pip-sync {{ 'requirements-dev.txt' if is_dev else 'requirements.txt' }}"
  args:
    chdir: "{{ archivematica_src_dir }}/archivematica"
  environment:
    LC_ALL: "en_US.utf8"
    LANG: "en_US.utf8"
